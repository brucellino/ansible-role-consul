---
name: main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'commitlint.config.js'
      - '.releaserc.yaml'
      - '.ansible-lint'
      - '.config/**'
      - '.secrets.baseline'
      - 'CHANGELOG.md'
jobs:
  lint:
    name: Static Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Lint
        uses: ansible-community/ansible-lint@v25.6.1
  secure:
    name: Security
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --openssl-legacy-provider
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Make results-dir
        run: mkdir -p results-dir
      - name: run kics Scan
        uses: checkmarx/kics-action@v2.1.12
        with:
          path: '.'
          output_path: results-dir
          output_formats: 'json,sarif'
          enable_comments: true
          enable_annotations: true
          enable_jobs_summary: true
          fail_on: high
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results-dir/results.sarif
  build:
    continue-on-error: true
    needs:
      - secure
      - lint
    name: Build Images
    permissions: write-all
    env:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      PACKER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    services:
      vault:
        image: "public.ecr.aws/hashicorp/vault:1.20"
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: ${{ secrets.VAULT_TOKEN }}
        options: >-
          --health-cmd "VAULT_ADDR=http://0.0.0.0:8200 vault status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ".github/build/"
    strategy:
      fail-fast: false
      matrix:
        target:
          - "consul.docker.ubuntu-amd64"
          - "consul.docker.ubuntu-arm64"
          - "consul.arm.raspi-os-64"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Prerequisites
        run: |
          sudo apt-get install -y \
          binfmt-support \
          gzip \
          python3 \
          python3-pip \
          qemu \
          qemu-user-static
          unzip \
      - name: Add Ansible
        run: sudo -H pip3 install ansible
      - name: Get Packer
        run: |
          curl -fL https://releases.hashicorp.com/packer/1.8.4/packer_1.8.4_linux_amd64.zip | gunzip ->packer && \
          chmod u+x packer && \
          ./packer -version
      - name: Init Packer
        run: ./packer init .
      - name: Build Image (PR)
        shell: 'script -q -e -c "bash {0}"'
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          export run_as
          if [[ "${{ matrix.target }}" == "consul.arm.raspi-os-64" ]]; then
            run_as="sudo -E env PATH=${PATH}"
          else
            run_as=""
          fi
          eval "$run_as" ./packer build \
            -var roles_path="${GITHUB_WORKSPACE}/../" \
            -var docker_password=${{ secrets.GITHUB_TOKEN }} \
            -var tag_version="pr-${{ github.event.pull_request.number }}" \
            -only=${{ matrix.target }} \
            consul.pkr.hcl
      - name: Build Image
        shell: 'script -q -e -c "bash {0}"'
        if: ${{ github.ref_name == 'main' }}
        run: |
          export run_as
          if [[ "${{ matrix.target }}" == "consul.arm.raspi-os-64" ]] ; then
            run_as="sudo -E env PATH=${PATH}"
          else
            run_as=""
          fi
          eval "$run_as" ./packer build \
            -var roles_path="${GITHUB_WORKSPACE}/../" \
            -var docker_password=${{ secrets.GITHUB_TOKEN }} \
            -var tag_version="latest" \
            -only=${{ matrix.target }} \
            consul.pkr.hcl
      - name: Compress artifact
        if: ${{ matrix.target == 'consul.arm.raspi-os-64' }}
        run: sudo xz -T 9 --compress raspios-bullseye.img
      - name: Upload artifact
        if: ${{ matrix.target == 'consul.arm.raspi-os-64' }}
        uses: actions/upload-artifact@v4
        with:
          name: raspi-os-64
          path: .github/build/raspios-bullseye.img.xz
  test-pr:
    continue-on-error: true
    needs:
      - build
    name: Test PR
    runs-on: ubuntu-latest
    services:
      vault:
        image: "public.ecr.aws/hashicorp/vault:1.20"
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: ${{ secrets.VAULT_TOKEN }}
        options: >-
          --health-cmd "VAULT_ADDR=http://0.0.0.0:8200 vault status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    if: github.event_name == 'pull_request'
    container:
      image: ghcr.io/brucellino/ansible-role-consul/consul-ubuntu-amd64:pr-${{ github.event.pull_request.number }}
      env:
        VAULT_ADDR: http://vault:8200
        VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
    steps:
      - name: Get Vault client
        run: |
          curl -fL https://releases.hashicorp.com/vault/1.11.0/vault_1.11.0_linux_amd64.zip \
          | gunzip -> vault ; \
          chmod u+x vault
      - name: Vault login
        run: ./vault login ${{ secrets.VAULT_TOKEN }}
      - name: Enable KV engine
        run: ./vault secrets enable --path kv kv-v2
      - name: Create gossip key
        run: ./vault kv put kv/consul-test gossip_key=$(consul keygen)
      - name: Create Certificates
        run: consul tls ca create
      - name: Put the certs in the Vault
        run: >-
          cat consul-agent-ca.pem
          | ./vault kv patch kv/consul-test ca_cert=- ;
          cat consul-agent-ca-key.pem
          | ./vault kv patch kv/consul-test ca_key=-
      - name: Create server certs
        run: consul tls cert create -server -dc dc1 -domain consul

  test:
    needs:
      - build
    name: Test main
    runs-on: ubuntu-latest
    services:
      vault:
        image: "public.ecr.aws/hashicorp/vault:1.20"
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: ${{ secrets.VAULT_TOKEN }}
        options: >-
          --health-cmd "VAULT_ADDR=http://0.0.0.0:8200 vault status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    if: github.ref_name == 'main' && github.ref_type == 'branch'
    container:
      image: ghcr.io/brucellino/ansible-role-consul/consul-ubuntu-amd64:latest
      env:
        VAULT_ADDR: http://vault:8200
        VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
    steps:
      - name: Get Vault client
        run: |
          curl -fL https://releases.hashicorp.com/vault/1.11.0/vault_1.11.0_linux_amd64.zip \
          | gunzip -> vault ; \
          chmod u+x vault
      - name: Vault login
        run: ./vault login ${{ secrets.VAULT_TOKEN }}
      - name: Enable KV engine
        run: ./vault secrets enable --path kv kv-v2
      - name: Create gossip key
        run: ./vault kv put kv/consul-test gossip_key=$(consul keygen)
      - name: Create Certificates
        run: consul tls ca create
      - name: Put the certs in the Vault
        run: >-
          cat consul-agent-ca.pem
          | ./vault kv patch kv/consul-test ca_cert=- ;
          cat consul-agent-ca-key.pem
          | ./vault kv patch kv/consul-test ca_key=-
      - name: Create server certs
        run: consul tls cert create -server -dc dc1 -domain consul


  release:
    needs:
      - secure
      - lint
      - build
      - test
    name: Release
    if: github.ref_name == 'main' && github.ref_type == 'branch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get os image
        uses: actions/download-artifact@v4
        with:
          name: raspi-os-64

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: add semantic release plugins
        run: |
          npm install -D '@semantic-release/changelog' \
                         '@semantic-release/github' \
                         '@semantic-release/git'
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
